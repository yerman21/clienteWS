#autor:yerry aguirre
from flask import (
	Flask,
	render_template,
	request,
    redirect,
    url_for,
    json
	)
import datetime
import requests
import io
from random import randint
from BaseDatos import BaseDatos

#create the application instance
app = Flask(__name__, template_folder="templates")
bd = BaseDatos()

@app.route("/")
def home():
    """
   This function just responds to the browser ULR
    localhost:5000/
    :return: the rendered template 'home.html
    """
    return render_template("home.html")

@app.route("/valiarDescuento", methods=["GET"])
def valid():
    return render_template("lecturaTicket.html")

@app.route("/convertToQR", methods=["POST"])
def toQR():
    form = request.form.to_dict(flat=True)
    producto = form["producto"]
    descuento = form["descuento"]
    idCodigo = "CODI"+str(randint(0, 600))
    form["idCodigo"] = idCodigo

    data = {}

    if not producto or not descuento:
        return msgRequired("Producto y Descuento"), 204#, {'Content-Type':'application/json'}

    form["fecha"] = datetime.datetime.now()
    rptWebService = webservice_toQR(json.dumps(form))

    data["msg"] = rptWebService["msg"]
    data["img64"] = rptWebService["data"]    

    bd.add(idCodigo, form)
    return data, 200, {'Content-Type':'application/json'}

@app.route("/decodeQR", methods=["POST"])
def decodeQR():
    fileCodeQR = request.files["fileCode"]
    data = {}

    if not fileCodeQR:
        return msgRequired("FileCode"), 204#, {'Content-Type':'application/json'}

    #enviando imgCodeQR como bytes[]
    rptWebService = webservice_decodeQR(fileCodeQR.read())

    data["msg"] = rptWebService["msg"]
    data["info"] = json.loads(rptWebService["data"])

    bd.updateStatus(data["info"]["idCodigo"])
    return data, 200, {'Content-Type':'application/json'}

@app.route("/viewData", methods=['GET'])
def showData():
    return bd.showAll(), 200, {'Content-Type': 'application/json'}

def webservice_toQR(text):
    r = requests.get("http://localhost:8585/AppServidora/webserver/v1/toQR", params = {"value":text})
    #r = {'msg': 'mensaje del server', 'data': ''}
    #return r
    return r.json()

def webservice_decodeQR(imgCodeQR):
    #si hay tiempo probar el atributo en el post files=[('imgBytes',('test.png', imgCodeQR, 'image/png'))], cambiando en el server de java a File como tipo de parametro
    r = requests.post("http://localhost:8585/AppServidora/webserver/v1/decodeQR", data = imgCodeQR) #json.dumps({"imgBytes":imgCodeQR})
    return r.json()

def msgRequired(parametro):
    return "'"+parametro+"' son(es) requerido(s) por el sistema"

# Si estamos ejecutando en modo independiente, ejecute la aplicación
if __name__ == "__main__":
    app.run(debug=True, port=8000)